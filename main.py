# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'SampleGUI2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtWidgets
import random
import numpy.fft as fft

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5.QtWidgets import QApplication, QWidget
from pyqtgraph import PlotWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from pyqtgraph import GraphicsLayoutWidget
import sys
import shutil
import os
import csv
import datetime
import numpy as np
import pandas as pd
import pyqtgraph.exporters
import pyqtgraph as pg
from PyQt5 import QtWidgets as qtw
from PyQt5 import QtCore as qtc
from PyQt5 import QtGui as qtg
from PyQt5 import QtCore, QtGui, QtWidgets

from pyqtgraph import PlotWidget
from PyQt5 import QtWidgets, uic, QtGui
from PyQt5 import QtCore
import sys
import numpy as np
import pandas as pd
from PyQt5.QtWidgets import QFileDialog, QGraphicsScene
from pyqtgraph import PlotWidget, PlotItem
import pyqtgraph as pg
import os
from scipy import signal
import matplotlib.pyplot as plt
import pyqtgraph.exporters
from matplotlib.animation import FuncAnimation
from numpy import arange, sin, pi
from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QAction, QTableWidget,QTableWidgetItem,QVBoxLayout
import pandas as pd


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1097, 856)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.splitter_4 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_4.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_4.setChildrenCollapsible(False)
        self.splitter_4.setObjectName("splitter_4")
        self.widget = QtWidgets.QWidget(self.splitter_4)
        self.widget.setObjectName("widget")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.mainGraph = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.mainGraph.setFont(font)
        self.mainGraph.setObjectName("mainGraph")
        self.verticalLayout_3.addWidget(self.mainGraph, 0, QtCore.Qt.AlignHCenter)
        self.graphicsView_main = PlotWidget(self.widget)
        self.graphicsView_main.setObjectName("graphicsView_main")
        self.graphicsView_main.setBackground('w')
        self.verticalLayout_3.addWidget(self.graphicsView_main)
        self.verticalLayout_6.addLayout(self.verticalLayout_3)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.reconstructionGraph = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.reconstructionGraph.setFont(font)
        self.reconstructionGraph.setObjectName("reconstructionGraph")
        self.verticalLayout_4.addWidget(self.reconstructionGraph, 0, QtCore.Qt.AlignHCenter)
        self.graphicsView_reconstructed = PlotWidget(self.widget)
        self.graphicsView_reconstructed.setBackground('w')
        self.graphicsView_reconstructed.setObjectName("graphicsView_reconstructed")
        self.verticalLayout_4.addWidget(self.graphicsView_reconstructed)
        self.verticalLayout_6.addLayout(self.verticalLayout_4)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.sampleFrequnecy = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.sampleFrequnecy.setFont(font)
        self.sampleFrequnecy.setObjectName("sampleFrequnecy")
        self.horizontalLayout_8.addWidget(self.sampleFrequnecy)
        self.horizontalSlider_samplingFreq = QtWidgets.QSlider(self.widget)
        self.horizontalSlider_samplingFreq.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_samplingFreq.setTickPosition(QtWidgets.QSlider.TicksBelow)
        self.horizontalSlider_samplingFreq.setObjectName("horizontalSlider_samplingFreq")
        self.horizontalSlider_samplingFreq.setMinimum(1)
        self.horizontalSlider_samplingFreq.setSingleStep(1)

        self.horizontalLayout_8.addWidget(self.horizontalSlider_samplingFreq)
        self.fmax = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.fmax.setFont(font)
        self.fmax.setTextFormat(QtCore.Qt.RichText)
        self.fmax.setObjectName("fmax")
        self.horizontalLayout_8.addWidget(self.fmax)
        self.verticalLayout_5.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem)
        self.checkBox_showGraphReconstruction = QtWidgets.QCheckBox(self.widget)
        self.checkBox_showGraphReconstruction.setChecked(True)
        self.checkBox_showGraphReconstruction.setTristate(False)
        self.checkBox_showGraphReconstruction.setObjectName("checkBox_showGraphReconstruction")
        self.horizontalLayout_7.addWidget(self.checkBox_showGraphReconstruction)



        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem1)
        self.horizontalLayout_10.addLayout(self.horizontalLayout_7)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem2)
        self.checkBox__showSignalReconstructed = QtWidgets.QCheckBox(self.widget)
        self.checkBox__showSignalReconstructed.setChecked(False)
        self.checkBox__showSignalReconstructed.setObjectName("checkBox__showSignalReconstructed")
        self.horizontalLayout_9.addWidget(self.checkBox__showSignalReconstructed)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem3)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem4)
        self.checkBox_showSamples = QtWidgets.QCheckBox(self.widget)
        self.checkBox_showSamples.setObjectName("checkBox_showSamples")
        self.horizontalLayout_9.addWidget(self.checkBox_showSamples)
        # self.checkBox_showSamples.setChecked(False)
        self.horizontalLayout_10.addLayout(self.horizontalLayout_9)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_10.addItem(spacerItem5)
        self.verticalLayout_5.addLayout(self.horizontalLayout_10)
        self.verticalLayout_6.addLayout(self.verticalLayout_5)
        self.splitter_3 = QtWidgets.QSplitter(self.splitter_4)
        self.splitter_3.setOrientation(QtCore.Qt.Vertical)
        self.splitter_3.setChildrenCollapsible(False)
        self.splitter_3.setObjectName("splitter_3")
        self.splitter = QtWidgets.QSplitter(self.splitter_3)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setChildrenCollapsible(False)
        self.splitter.setObjectName("splitter")
        self.layoutWidget = QtWidgets.QWidget(self.splitter)
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 7)
        self.verticalLayout.setObjectName("verticalLayout")
        self.composer = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.composer.setFont(font)
        self.composer.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.composer.setObjectName("composer")
        self.verticalLayout.addWidget(self.composer)
        self.graphicsView_composer = PlotWidget(self.layoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.graphicsView_composer.sizePolicy().hasHeightForWidth())
        self.graphicsView_composer.setSizePolicy(sizePolicy)
        self.graphicsView_composer.setObjectName("graphicsView_composer")
        self.graphicsView_composer.setBackground('w')
        self.verticalLayout.addWidget(self.graphicsView_composer)
        self.layoutWidget1 = QtWidgets.QWidget(self.splitter)
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.formLayout = QtWidgets.QFormLayout(self.layoutWidget1)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.horizontalLayout.setContentsMargins(40, -1, 30, -1)
        self.horizontalLayout.setSpacing(9)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frequency = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.frequency.setFont(font)
        self.frequency.setObjectName("frequency")
        self.horizontalLayout.addWidget(self.frequency)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem6)
        self.lineEdit_freq = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_freq.setObjectName("lineEdit_freq")
        self.horizontalLayout.addWidget(self.lineEdit_freq)
        self.hz = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.hz.setFont(font)
        self.hz.setObjectName("hz")
        self.horizontalLayout.addWidget(self.hz)
        self.horizontalLayout.setStretch(0, 9)
        self.horizontalLayout.setStretch(1, 9)
        self.horizontalLayout.setStretch(2, 6)
        self.formLayout.setLayout(0, QtWidgets.QFormLayout.SpanningRole, self.horizontalLayout)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.horizontalLayout_2.setContentsMargins(40, -1, 55, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.magnitude = QtWidgets.QLabel(self.layoutWidget1)

        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.magnitude.setFont(font)
        self.magnitude.setObjectName("magnitude")
        self.horizontalLayout_2.addWidget(self.magnitude)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem7)
        self.lineEdit__mag = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit__mag.setObjectName("lineEdit__mag")
        self.horizontalLayout_2.addWidget(self.lineEdit__mag)
        self.horizontalLayout_2.setStretch(0, 9)
        self.horizontalLayout_2.setStretch(1, 9)
        self.horizontalLayout_2.setStretch(2, 6)
        self.formLayout.setLayout(1, QtWidgets.QFormLayout.SpanningRole, self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.horizontalLayout_3.setContentsMargins(40, -1, 0, -1)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.phaseShift = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.phaseShift.setFont(font)
        self.phaseShift.setObjectName("phaseShift")
        self.horizontalLayout_3.addWidget(self.phaseShift)
        spacerItem8 = QtWidgets.QSpacerItem(35, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem8)
        self.lineEdit_phase = QtWidgets.QLineEdit(self.layoutWidget1)
        self.lineEdit_phase.setObjectName("lineEdit_phase")
        self.horizontalLayout_3.addWidget(self.lineEdit_phase)
        self.degree = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.degree.setFont(font)
        self.degree.setObjectName("degree")
        self.horizontalLayout_3.addWidget(self.degree)
        self.horizontalLayout_3.setStretch(0, 9)
        self.horizontalLayout_3.setStretch(1, 9)
        self.horizontalLayout_3.setStretch(2, 6)
        self.formLayout.setLayout(2, QtWidgets.QFormLayout.SpanningRole, self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setContentsMargins(0, -1, -1, -1)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem9)
        self.addSignal = QtWidgets.QPushButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.addSignal.setFont(font)
        self.addSignal.setObjectName("addSignal")
        self.horizontalLayout_4.addWidget(self.addSignal)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem10)
        self.horizontalLayout_4.setStretch(0, 3)
        self.horizontalLayout_4.setStretch(1, 9)
        self.horizontalLayout_4.setStretch(2, 3)
        self.formLayout.setLayout(3, QtWidgets.QFormLayout.SpanningRole, self.horizontalLayout_4)
        self.splitter_2 = QtWidgets.QSplitter(self.splitter_3)
        self.splitter_2.setOrientation(QtCore.Qt.Vertical)
        self.splitter_2.setChildrenCollapsible(False)
        self.splitter_2.setObjectName("splitter_2")
        self.widget1 = QtWidgets.QWidget(self.splitter_2)
        self.widget1.setObjectName("widget1")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget1)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.SignalsSummation = QtWidgets.QLabel(self.widget1)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.SignalsSummation.setFont(font)
        self.SignalsSummation.setAlignment(QtCore.Qt.AlignCenter)
        self.SignalsSummation.setObjectName("SignalsSummation")
        self.verticalLayout_2.addWidget(self.SignalsSummation)
        self.graphicsView_signalsSum = PlotWidget(self.widget1)
        self.graphicsView_signalsSum.setBackground('w')
        self.graphicsView_signalsSum.setObjectName("graphicsView_signalsSum")
        self.verticalLayout_2.addWidget(self.graphicsView_signalsSum)
        self.widget2 = QtWidgets.QWidget(self.splitter_2)
        self.widget2.setObjectName("widget2")
        self.formLayout_2 = QtWidgets.QFormLayout(self.widget2)
        self.formLayout_2.setContentsMargins(0, 0, 0, 0)
        self.formLayout_2.setObjectName("formLayout_2")
        self.table_signals = QtWidgets.QTableWidget(self.widget2)
        self.cellsCount=1
        self.table_signals.setObjectName("table_signals")
        self.table_signals.setColumnCount(4)
        self.table_signals.setRowCount(self.cellsCount)
        item = QtWidgets.QTableWidgetItem()
        self.table_signals.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_signals.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_signals.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table_signals.setHorizontalHeaderItem(3, item)
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.SpanningRole, self.table_signals)

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem11)
        self.deleteSignal = QtWidgets.QPushButton(self.widget2)
        self.deleteSignal.setObjectName("deleteSignal")
        self.horizontalLayout_5.addWidget(self.deleteSignal)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem12)
        self.formLayout_2.setLayout(1, QtWidgets.QFormLayout.SpanningRole, self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setContentsMargins(0, -1, -1, -1)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        spacerItem13 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem13)
        self.confirm = QtWidgets.QPushButton(self.widget2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.confirm.setFont(font)
        self.confirm.setObjectName("confirm")
        self.horizontalLayout_6.addWidget(self.confirm)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem14)
        self.horizontalLayout_6.setStretch(0, 3)
        self.horizontalLayout_6.setStretch(1, 9)
        self.horizontalLayout_6.setStretch(2, 3)
        self.formLayout_2.setLayout(2, QtWidgets.QFormLayout.SpanningRole, self.horizontalLayout_6)
        self.gridLayout.addWidget(self.splitter_4, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1097, 26))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuTesting_Signals = QtWidgets.QMenu(self.menubar)
        self.menuTesting_Signals.setObjectName("menuTesting_Signals")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSignal_1 = QtWidgets.QAction(MainWindow)
        self.actionSignal_1.setObjectName("actionSignal_1")
        self.actionSignal_2 = QtWidgets.QAction(MainWindow)
        self.actionSignal_2.setObjectName("actionSignal_2")
        self.actionSignal_3 = QtWidgets.QAction(MainWindow)
        self.actionSignal_3.setObjectName("actionSignal_3")
        self.actionSignal_4 = QtWidgets.QAction(MainWindow)
        self.actionSignal_4.setObjectName("actionSignal_4")
        self.menuFile.addAction(self.actionOpen)
        self.menuTesting_Signals.addAction(self.actionSignal_1)
        self.menuTesting_Signals.addAction(self.actionSignal_2)
        self.menuTesting_Signals.addAction(self.actionSignal_3)
        self.menuTesting_Signals.addAction(self.actionSignal_4)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuTesting_Signals.menuAction())
        self.retranslateUi(MainWindow)

        self.time = []
        self.amplitude = []

        self.SinWaves = []
        self.tComposer = arange(0.0, 2.0, 0.0001)
        self.magnitude = 1
        self.frequence = 1
        self.phase = 0


        self.column_table_signals=3
        self.row_table_index=0


        self.update_signal()

        self.checkBox_showGraphReconstruction.stateChanged['int'].connect(self.hideReconstructionGraph)
        self.checkBox_showSamples.stateChanged.connect(lambda: self.signalProcessing())
        self.checkBox__showSignalReconstructed.stateChanged.connect(lambda: self.signalProcessing())

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.lineEdit_freq.returnPressed.connect(lambda: self.frequence_set())  # this line to take any number will put in text to specific function
        self.lineEdit__mag.returnPressed.connect(lambda: self.magnitude_set())  # this line to take any number will put in text to specific function
        self.lineEdit_phase.returnPressed.connect(lambda: self.phase_set())  # this line to take any number will put in text to specific function pushButton
        self.addSignal.clicked.connect(lambda: self.add_sginal())  # when click on this button will add signal to athor signal
        self.deleteSignal.clicked.connect(lambda: self.delete_signal())  # when click on this button will delete signal from summition signal
        self.confirm.clicked.connect(lambda: self.confirm_signal())
        self.actionOpen.triggered.connect(lambda: self.open_signal())
        self.actionSignal_1.triggered.connect(lambda: self.open_sigan_1_test())
        self.actionSignal_2.triggered.connect(lambda: self.open_sigan_2_test())
        self.actionSignal_3.triggered.connect(lambda: self.open_sigan_3_test())
        self.actionSignal_4.triggered.connect(lambda: self.open_sigan_4_test())


        self.horizontalSlider_samplingFreq.valueChanged[int].connect(lambda: self.signalProcessing())

    # function for creating sin wave
    def sine_wave(self):
        return self.magnitude * sin((2 * pi * self.frequence * self.tComposer) + (self.phase*np.pi/180))

    # function to get number from line edit to set ##frquency## give it to sin_wave function
    def frequence_set(self):
        self.frequence = int(self.lineEdit_freq.text()) ##because self.lineEdit.text() return string
        self.update_signal()

    # function to get number from line edit to set ##magnitude## give it to sin_wave function
    def magnitude_set(self):
        self.magnitude = int(self.lineEdit__mag.text())
        self.update_signal()

    # function to get number from line edit to set ##phase## give it to sin_wave function
    def phase_set(self):
        self.phase = int(self.lineEdit_phase.text())
        self.update_signal()

    # function that call at begnning of program  to clear plotwidget and call also after any change in line edit for (frequency, magnitude , phase)
    def update_signal(self):
        self.graphicsView_composer.clear()
        self.graphicsView_composer.plot(self.tComposer, self.sine_wave())

    def add_sginal(self):
        self.SinWaves.append(self.sine_wave())

        self.sum_signal=0
        for x in self.SinWaves:
            self.sum_signal=self.sum_signal+x
        self.graphicsView_signalsSum.clear()
        self.graphicsView_signalsSum.plot(self.tComposer, self.sum_signal)
        self.insert_table()




    def insert_table(self):
        self.cellsCount+=1
        self.table_signals.setRowCount(self.cellsCount)

        self.table_signals.setItem(self.row_table_index, 0, QTableWidgetItem(str(self.row_table_index+1)))
        self.table_signals.setItem(self.row_table_index, 1, QTableWidgetItem(str(self.frequence)))
        self.table_signals.setItem(self.row_table_index, 2, QTableWidgetItem(str(self.magnitude)))
        self.table_signals.setItem(self.row_table_index, 3, QTableWidgetItem(str(self.phase)))
        self.row_table_index += 1

    def delete_signal(self):
        self.sum_signal -= self.SinWaves[self.table_signals.currentRow()]

        del self.SinWaves[self.table_signals.currentRow()]

        if len(self.SinWaves) == 0:
            self.graphicsView_signalsSum.clear()

        else:
            self.graphicsView_signalsSum.clear()
            self.graphicsView_signalsSum.plot(self.tComposer, self.sum_signal)


        self.table_signals.removeRow(self.table_signals.currentRow())
        self.cellsCount -= 1
        self.table_signals.setRowCount(self.cellsCount)
        self.row_table_index -= 1

    def confirm_signal(self):
        self.time=self.tComposer
        self.amplitude=self.sum_signal
        self.getMaxFrequency()
        self.signalProcessing()

    def open_signal(self):
        path = QFileDialog.getOpenFileName()[0]
        data = np.genfromtxt(path, delimiter=',')
        time = list(data[:, 0])
        amplitude = list(data[:, 1])
        time=time[:1000]
        amplitude=amplitude[:1000]

        self.time = np.array(time)
        self.amplitude = np.array(amplitude)
        self.getMaxFrequency()
        self.signalProcessing()


    def signalProcessing(self):

        self.graphicsView_main.clear()

        pen = pg.mkPen(color=(255,0 , 0),width=3)
        self.graphicsView_main.plot(self.time,self.amplitude,pen=pen)##main signal plotting RED

        fs=self.horizontalSlider_samplingFreq.value()

        Ts=1/fs
        n=len(self.time)-1

        t_resampled = np.arange(0, self.time[n] , Ts)

        result = np.where(self.time <= Ts )
        NewStep = max(result[0])
        xSample = []
        for x in range(0, len(self.time), NewStep):
            xSample.append(self.amplitude[x])

        if len(xSample)>len(t_resampled): ## if one of the arrays is bigger than the other , slice the bigger into the size of the smaller
            xSample=xSample[:len(t_resampled)]
        else :
            t_resampled=t_resampled[:len(xSample)]

        if self.checkBox_showSamples.isChecked() == True:
            pen = pg.mkPen(color=(255, 255, 255),width=.001, style=QtCore.Qt.DotLine)
            self.graphicsView_main.plot(t_resampled, xSample, pen=pen, symbol='+',symbolSize=10, symbolBrush=('b'))


        ##RECONSTRUCTION##
        num_coeffs = len(t_resampled)  # sample points
        x_reconstructed = 0

        for k in range(0, num_coeffs):  # since function is real, need both sides
            x_reconstructed += xSample[k] * np.sinc(k - fs * self.time)

        self.graphicsView_reconstructed.clear()

        pen = pg.mkPen(color=(255, 255, 0), width=3)
        self.graphicsView_reconstructed.plot(self.time, x_reconstructed, pen=pen)

        if self.checkBox__showSignalReconstructed.isChecked() == True:
            self.graphicsView_main.plot(self.time, x_reconstructed, pen=pen)

    def hideReconstructionGraph(self):
        if self.checkBox_showGraphReconstruction.isChecked() == True:
            self.graphicsView_reconstructed.show()
        else:
            self.graphicsView_reconstructed.hide()

    def getMaxFrequency(self):

        step = (self.time[-1] - self.time[0]) / len(self.time)
        print(step)
        fSample = 1 / step
        spectrum = fft.fft(self.amplitude)#return signals that contain summation of total signals
        freq = fft.fftfreq(len(spectrum))#return all frequncies
        threshold = 0.5 * max(abs(spectrum))#high pass filter
        mask = abs(spectrum) > threshold#where cut all frequencies more than thresold
        peaks = freq[mask]#get max frequencies from frequncies after cutting
        peaks = abs(peaks) #get absolute
        maximumFrequency=max(peaks) * fSample #and multily by frequncy sampling
        print(maximumFrequency)
        self.horizontalSlider_samplingFreq.setMaximum(int(3 * maximumFrequency))

    def open_sigan_1_test(self):
        time =[]
        amplitude=[]
        with open("testsignal1 sin 2 + sin 6.csv") as f:
            for row in f:
                time=list(row[0])
                amplitude=list(row[1])
        # df = pd.read_csv('testsignal1 sin 2 + sin 6.csv')
        # matrix2 = df[df.columns[0]].to_numpy()
        # time= matrix2.tolist()
        # matrix1 = df[df.columns[1]].to_numpy()
        #amplitude = matrix1.tolist()
        self.time = np.array(time)
        self.amplitude = np.array(amplitude)
        self.getMaxFrequency()
        self.signalProcessing()

    def open_sigan_2_test(self):
        df = pd.read_csv('testsignal2(sin1+sin40).csv')
        matrix2 = df[df.columns[0]].to_numpy()
        time= matrix2.tolist()
        matrix1 = df[df.columns[1]].to_numpy()
        amplitude = matrix1.tolist()
        self.time = np.array(time)
        self.amplitude = np.array(amplitude)
        self.getMaxFrequency()
        self.signalProcessing()
    def open_sigan_3_test(self):
        df = pd.read_csv('testsignal3 sinx X x.csv')
        matrix2 = df[df.columns[0]].to_numpy()
        time= matrix2.tolist()
        matrix1 = df[df.columns[1]].to_numpy()
        amplitude = matrix1.tolist()
        self.time = np.array(time)
        self.amplitude = np.array(amplitude)
        self.getMaxFrequency()
        self.signalProcessing()
    def open_sigan_4_test(self):
        df = pd.read_csv('testsignal4(tanh+sin).csv')
        matrix2 = df[df.columns[0]].to_numpy()
        time = list(matrix2[:, 0])
        #amplitude = list(data[:, 1])
        time= matrix2.tolist()
        matrix1 = df[df.columns[1]].to_numpy()
        amplitude = list(matrix1[:, 1])
        #amplitude = matrix1.tolist()
        self.time = np.array(time)
        self.amplitude = np.array(amplitude)
        self.getMaxFrequency()
        self.signalProcessing()




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Signal Composer"))
        self.mainGraph.setText(_translate("MainWindow", "Main Graph"))
        self.reconstructionGraph.setText(_translate("MainWindow", "Reconstruction Graph"))
        self.sampleFrequnecy.setText(_translate("MainWindow", "Sample Frequency"))
        self.fmax.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">3 F</span><span style=\" font-size:12pt; vertical-align:sub;\">max</span></p></body></html>"))
        self.checkBox_showGraphReconstruction.setText(_translate("MainWindow", "Show Reconstruction Graph"))
        self.checkBox__showSignalReconstructed.setText(_translate("MainWindow", "Show Reconstructed Signal"))
        self.checkBox_showSamples.setText(_translate("MainWindow", "Show Samples"))
        self.composer.setText(_translate("MainWindow", "Composer"))
        self.frequency.setText(_translate("MainWindow", "Frequency"))
        self.lineEdit_freq.setText(_translate("MainWindow", "1"))
        self.hz.setText(_translate("MainWindow", "Hz"))
        self.magnitude.setText(_translate("MainWindow", "Magnitude"))
        self.lineEdit__mag.setText(_translate("MainWindow", "1"))
        self.phaseShift.setText(_translate("MainWindow", "Phase Shift"))
        self.lineEdit_phase.setText(_translate("MainWindow", "0"))
        self.degree.setText(_translate("MainWindow", "Degree"))
        self.addSignal.setText(_translate("MainWindow", "ADD SIGNAL"))
        self.SignalsSummation.setText(_translate("MainWindow", "Signals Summation"))
        item = self.table_signals.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Signals"))
        item = self.table_signals.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Freq"))
        item = self.table_signals.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Magnitude"))
        item = self.table_signals.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Phase-Shift"))
        self.deleteSignal.setText(_translate("MainWindow", "Delete Signal"))
        self.confirm.setText(_translate("MainWindow", "Confirm"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuTesting_Signals.setTitle(_translate("MainWindow", "Testing Signals"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSignal_1.setText(_translate("MainWindow", "Signal 1"))
        self.actionSignal_2.setText(_translate("MainWindow", "Signal 2"))
        self.actionSignal_3.setText(_translate("MainWindow", "Signal 3"))
        self.actionSignal_4.setText(_translate("MainWindow", "Signal 4"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
